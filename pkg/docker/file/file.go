package file

import (
	"fmt"
	"os"
	"path"
	"strings"
)

type Dockerfile struct {
	Dependencies          Dependencies
	DependenciesToInstall []string
	// Script is the path of the script in the second layer
	Script string
	// ShellPath is the path of the shell in the second layer
	ShellPath string
}

const (
	FirstLayerBaseImage  string = "alpine:latest"
	SecondLayerBaseImage string = "scratch"
	FirstLayerAlias      string = "builder"
)

func (d *Dockerfile) FirstLayer() (string, error) {
	var install string

	base := getPromotionalComments()

	base += fmt.Sprintf("FROM %s as %s\n", FirstLayerBaseImage, FirstLayerAlias)

	if len(d.DependenciesToInstall) > 0 {
		install = "RUN apk add --no-cache \\\n"

		for depCount, dep := range d.DependenciesToInstall {
			if depCount == len(d.DependenciesToInstall)-1 {
				install += fmt.Sprintf("    %s\n", dep)
				break
			} else {
				install += fmt.Sprintf("    %s \\\n", dep)
			}
		}
	}

	install += "\n"

	install += fmt.Sprintf("COPY %s .\n", d.Script)
	install += fmt.Sprintf("RUN chmod +x %s && mv %s /usr/bin/\n", d.Script, d.Script)
	return base + install, nil
}

func (d *Dockerfile) SecondLayer() (string, error) {
	base := fmt.Sprintf("\nFROM %s\n\n", SecondLayerBaseImage)
	base += labels()

	copyInstructionSet := d.generateCopyInstructionSet()
	base += copyInstructionSet
	envs := d.Envs()
	base += envs

	base += "WORKDIR /app\n"
	base += d.Entrypoint()

	return base, nil
}

func (d *Dockerfile) Envs() string {
	var envs string
	if d.ShellPath != "" {
		envs += fmt.Sprintf("\nENV SHELL=%s\n", d.ShellPath)
	}
	// add special env for the script
	envs += fmt.Sprintf("ENV %s=true\n", getScriptDockerEnvName(d.Script))

	return envs
}

func (d *Dockerfile) Entrypoint() string {
	return fmt.Sprintf("\nENTRYPOINT [\"%s\", \"/usr/bin/%s\"]\n", d.ShellPath, d.Script)
}

func (d *Dockerfile) getInstructions() (string, error) {
	firstLayer, err := d.FirstLayer()
	if err != nil {
		return "", err
	}
	secondLayer, err := d.SecondLayer()
	if err != nil {
		return "", err
	}

	return firstLayer + secondLayer, nil
}

func labels() string {
	lables := `
LABEL description="<description>"
# Add your name & email here
LABEL maintainer="FIRST_NAME LAST_NAME <your email>"
`
	return lables
}

func (d *Dockerfile) generateCopyInstructionSet() string {
	var copyInstructionSet string

	// first copy the user script
	copyInstructionSet += fmt.Sprintf("\nCOPY --from=%s /usr/bin/%s /usr/bin/\n", FirstLayerAlias, d.Script)

	if len(d.Dependencies.Bin) != 0 {
		copyInstructionSet += "## Adding Root Dependencies\n"
		for _, dep := range d.Dependencies.Bin {
			if len(dep.Requiredby) > 0 {
				copyInstructionSet += fmt.Sprintf("## Required By: %s\n", dep.Requiredby)
			}
			copyInstructionSet += fmt.Sprintf("COPY --from=%s %s %s\n", FirstLayerAlias, dep.FromPath, dep.ToPath)
		}
		copyInstructionSet += "\n\n"
	}

	if len(d.Dependencies.Lib) != 0 {
		copyInstructionSet += "## Adding Shared Libraries\n\n"
		for _, dep := range d.Dependencies.Lib {
			if len(dep.Requiredby) > 0 {
				copyInstructionSet += fmt.Sprintf("## Required By: %s\n", dep.Requiredby)
			}
			// remove the library soname from the to path
			toPath := fmt.Sprintf("%s/", path.Dir(dep.ToPath))
			copyInstructionSet += fmt.Sprintf("COPY --from=%s %s %s\n", FirstLayerAlias, dep.FromPath, toPath)
		}
	}

	return copyInstructionSet
}

func writeToFile(path, content string) error {
	// Convert the content into bytes
	bytes := []byte(content)

	// Write the bytes to the file
	err := os.WriteFile(path, bytes, 0644)

	// If there was an error, return it
	if err != nil {
		return err
	}

	// If everything went well, return nil
	return nil
}

func (d *Dockerfile) Generate() error {
	instructions, err := d.getInstructions()
	if err != nil {
		return err
	}

	err = writeToFile("Dockerfile", instructions)
	if err != nil {
		return err
	}

	return nil
}

func getPromotionalComments() string {
	return `
## Dockerfile generated by shedock.
## https://github.com/shedock/shedock

`
}

func getScriptDockerEnvName(scriptPath string) string {
	return fmt.Sprintf("%s_INSIDE_DOCKER", strings.ToUpper(strings.ReplaceAll(scriptPath, "/", "_")))
}
